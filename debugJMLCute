#!/bin/bash
# SRC_PATH needs to be inside the directory that has the Vagrantfile.
SRC_PATH=jmlcute-essentials/src/main/java/
JUNIT_ROOT=jmlcute-essentials/src/test/java/
LIB_PATH=

# Prepare
TARGET_DIR=target
CLASSES_DIR=main/java/
CROSSREFS_DIR=main/crossref/
rm -rf $TARGET_DIR
mkdir $TARGET_DIR
mkdir -p $TARGET_DIR/$CLASSES_DIR
mkdir -p $TARGET_DIR/$CROSSREFS_DIR

cd $TARGET_DIR

TARGET_DIR=.
SRC_PATH=../$SRC_PATH
JUNIT_ROOT=../$JUNIT_ROOT
LIB_PATH=../$LIB_PATH
JMLCUTE_JAR=../jmlcute.jar
JCUTE_JAR=../lib/jcute.jar
JAVA_LIB_PATH=..
LD_LIBRARY_PATH=..
PATH=$PATH:..

# Print aspects
echo "Printing Aspects"
export CLASSPATH=$JMLCUTE_JAR
java org.jmlspecs.ajmlrac.Main --destination $CLASSES_DIR --sourcepath $SRC_PATH --classpath $CLASSPATH --source=1.7 --crosscuttingContractSpecifications --adviceChecking --defaultNonNull --mustBeExecutable --crossrefs $CROSSREFS_DIR --ajWeaver ajc -P $SRC_PATH/pt/tecnico/ulisboa/Run.java

# Weave aspects at compile time
echo "Weaving"
export CLASSPATH=$JMLCUTE_JAR
java org.aspectj.tools.ajc.Main -source 1.7 -d $CLASSES_DIR $SRC_PATH/pt/ulisboa/tecnico/Run.java $SRC_PATH/pt/ulisboa/tecnico/Add.java $CLASSES_DIR/*.aj

# Instrument
echo "Instrumenting"
# Changing the order in the CLASSPATH will break the script, because Soot is part of both jcute and abc compiler.
export CLASSPATH=$CLASSES_DIR:$JCUTE_JAR:$JMLCUTE_JAR
java -Dcute.sequential=true cute.instrument.CuteInstrumenter -keep-line-number -d $CLASSES_DIR -x cute -x lpsolve --app pt.ulisboa.tecnico.Run

# Concolically execute and Generate a JUnit Test Case per execution.
## TODO: Remove hardcoded properties
JUNIT_DIR=$JUNIT_ROOT/pt/ulisboa/tecnico
mkdir -p $JUNIT_DIR
JUNIT_PKG=pt.ulisboa.tecnico
JUNIT_CNAME=Add
JUNIT_FNAME=execute
JUNIT_LAST_DIR=. # The directory that contains the current junitInputFile.

ITER=10;
CUTE_ARGS=-p:1:-m:2
VM_ARGS="-Xmx512m -Xms512m"
for i in $(seq 1 "$ITER")
do
  EXECUTE="java $VM_ARGS -Djava.library.path=$JAVA_LIB_PATH -Dcute.args="$CUTE_ARGS" pt.ulisboa.tecnico.Run ;"
  echo "[Execution Path $i] $EXECUTE"
  export CLASSPATH=$CLASSES_DIR:$JMLCUTE_JAR
  $EXECUTE
  RET="$?"
  RET2="$(($RET&2))";
  echo "RET=$RET"
  echo "RET2=$RET2"
  CUTE_ARGS=-p:1

  # Generate Test Case
  echo "Generating Test Case $i"
  JUNIT_RUNCOUNT=$i
  export CLASSPATH=$CLASSES_DIR:$JMLCUTE_JAR
  java $VM_ARGS cute.concolic.logging.JUnitTestGenerator $JUNIT_DIR $JUNIT_PKG $JUNIT_CNAME $JUNIT_FNAME $JUNIT_RUNCOUNT $JUNIT_LAST_DIR

  if [[ ("$RET2" -eq "2") ]]
  then
    break
  fi
done

# Report Branch Coverage
COVERAGE_LOG_DIR=.
export CLASSPATH=$JMLCUTE_JAR
java cute.concolic.logging.BranchCoverageLog $COVERAGE_LOG_DIR
